"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Parser = void 0;
const path_1 = require("path");
const Matchers_1 = require("./Matchers");
const switchRegex_1 = require("./switchRegex");
function unescaped(args) {
    return args.map(v => v.replace(/\\/g, ''));
}
class Parser {
    constructor(formatter) {
        this.formatter = formatter;
        this.formattedSummary = false;
        this.failures = {};
        this.linkerFailure = {
            files: [],
        };
        this.currentIssue = {};
    }
    parse(text) {
        const matchedErrorResults = this.updateErrorState(text);
        if (this.shouldFormatWarning()) {
            return this.formatCompileWarning();
        }
        if (this.shouldFormatError()) {
            return this.formatCompileError();
        }
        if (matchedErrorResults) {
            return '';
        }
        const matchedLinkerResults = this.updateLinkerFailureState(text);
        if (this.shouldFormatUndefinedSymbols()) {
            return this.formatUndefinedSymbols();
        }
        if (this.shouldFormatDuplicateSymbols()) {
            return this.formatDuplicateSymbols();
        }
        if (matchedLinkerResults) {
            return '';
        }
        this.updateTestState(text);
        const { formatter } = this;
        return switchRegex_1.switchRegex(text, [
            [
                Matchers_1.Matchers.ANALYZE_MATCHER,
                ([, $1, $2, $3, $4]) => formatter.formatFileOperation({
                    type: 'Analyze',
                    filePath: $1,
                    fileName: $2,
                    target: $3,
                    project: $4,
                }),
            ],
            [
                Matchers_1.Matchers.BUILD_TARGET_MATCHER,
                ([, $1, $2, $3]) => formatter.formatTarget({
                    type: 'Build',
                    configuration: $3,
                    target: $1,
                    project: $2,
                }),
            ],
            [
                Matchers_1.Matchers.AGGREGATE_TARGET_MATCHER,
                ([, $1, $2, $3]) => formatter.formatTarget({
                    type: 'Aggregate',
                    configuration: $3,
                    target: $1,
                    project: $2,
                }),
            ],
            [
                Matchers_1.Matchers.ANALYZE_TARGET_MATCHER,
                ([, $1, $2, $3]) => formatter.formatTarget({
                    type: 'Analyze',
                    configuration: $3,
                    target: $1,
                    project: $2,
                }),
            ],
            [Matchers_1.Matchers.CLEAN_REMOVE_MATCHER, ([$0]) => formatter.formatCleanRemove($0)],
            [
                Matchers_1.Matchers.CLEAN_TARGET_MATCHER,
                ([, $1, $2, $3]) => formatter.formatTarget({
                    type: 'Clean',
                    configuration: $3,
                    target: $1,
                    project: $2,
                }),
            ],
            [
                Matchers_1.Matchers.ANY_COPY_MATCHER,
                ([, $1, $2, $3, $4, $5]) => {
                    let from = $3;
                    let to = $2;
                    // Flipped with CpResource and CpHeader
                    if ($1.startsWith('Cp')) {
                        from = $2;
                        to = $3;
                    }
                    return formatter.formatCopy({ type: $1, from, to, target: $4, project: $5 });
                },
            ],
            [Matchers_1.Matchers.CHECK_DEPENDENCIES_MATCHER, ([$0]) => formatter.formatCheckDependencies($0)],
            [Matchers_1.Matchers.Errors.CLANG_ERROR_MATCHER, ([, $1]) => formatter.formatError($1)],
            [
                Matchers_1.Matchers.CODESIGN_FRAMEWORK_MATCHER,
                ([, $1, $2, $3, $4]) => formatter.formatFileOperation({
                    type: 'CodeSign',
                    fileName: $2,
                    filePath: $1,
                    target: $3,
                    project: $4,
                }),
            ],
            [
                Matchers_1.Matchers.CODESIGN_MATCHER,
                ([, $1, $2, $3, $4]) => formatter.formatFileOperation({
                    type: 'CodeSign',
                    fileName: $2,
                    filePath: $1,
                    target: $3,
                    project: $4,
                }),
            ],
            [Matchers_1.Matchers.Errors.CHECK_DEPENDENCIES_ERRORS_MATCHER, ([, $1]) => formatter.formatError($1)],
            [
                Matchers_1.Matchers.Errors.PROVISIONING_PROFILE_REQUIRED_MATCHER,
                ([, $1]) => formatter.formatError($1),
            ],
            [Matchers_1.Matchers.Errors.NO_CERTIFICATE_MATCHER, ([, $1]) => formatter.formatError($1)],
            [
                Matchers_1.Matchers.COMPILE_MATCHER,
                ([, $1, $2, $3, $4, $5]) => formatter.formatFileOperation({
                    type: $1,
                    fileName: $3,
                    filePath: $2,
                    target: $4,
                    project: $5,
                }),
            ],
            [Matchers_1.Matchers.COMPILE_COMMAND_MATCHER, ([, $1, $2]) => formatter.formatCompileCommand($1, $2)],
            [
                Matchers_1.Matchers.COMPILE_XIB_MATCHER,
                ([, $1, $2, $3, $4]) => formatter.formatFileOperation({
                    type: 'CompileXIB',
                    fileName: $2,
                    filePath: $1,
                    target: $3,
                    project: $4,
                }),
            ],
            [
                Matchers_1.Matchers.COMPILE_STORYBOARD_MATCHER,
                ([, $1, $2, $3, $4]) => formatter.formatFileOperation({
                    type: 'CompileStoryboard',
                    fileName: $2,
                    filePath: $1,
                    target: $3,
                    project: $4,
                }),
            ],
            [Matchers_1.Matchers.EXECUTED_MATCHER, () => this.formatSummaryIfNeeded(text)],
            [Matchers_1.Matchers.REMARK_MATCHER, ([, $1]) => formatter.formatRemark($1)],
            [
                Matchers_1.Matchers.COMPILE_SWIFT_SOURCES_MATCHER,
                ([, , $2, $3, $4, $5, $6]) => formatter.formatCompileSwiftSources($2, $3, $4, $5, $6),
            ],
            [
                Matchers_1.Matchers.EMIT_SWIFT_MODULE_MATCHER,
                ([, , $2, $3, $4, $5]) => formatter.formatEmitSwiftModule($2, $3, $4, $5),
            ],
            [
                Matchers_1.Matchers.RESTARTING_TESTS_MATCHER,
                () => formatter.formatFailingTest(this.testSuite, this.testCase, 'Test crashed', 'n/a'),
            ],
            [
                Matchers_1.Matchers.UI_FAILING_TEST_MATCHER,
                ([, $1, $2]) => formatter.formatFailingTest(this.testSuite, this.testCase, $2, $1),
            ],
            [
                Matchers_1.Matchers.FAILING_TEST_MATCHER,
                ([, $1, $2, $3, $4]) => formatter.formatFailingTest($2, $3, $4, $1),
            ],
            [Matchers_1.Matchers.Errors.FATAL_ERROR_MATCHER, ([, $1]) => formatter.formatError($1)],
            [Matchers_1.Matchers.Errors.RSYNC_ERROR_MATCHER, ([, $1]) => formatter.formatError($1)],
            [
                Matchers_1.Matchers.Errors.FILE_MISSING_ERROR_MATCHER,
                ([, $1, $2]) => formatter.formatFileMissingError($1, $2),
            ],
            [
                Matchers_1.Matchers.GENERATE_DSYM_MATCHER,
                ([, $1, $2, $3, $4]) => formatter.formatFileOperation({
                    type: 'GenerateDSYMFile',
                    filePath: $1,
                    fileName: $2,
                    target: $3,
                    project: $4,
                }),
            ],
            [
                Matchers_1.Matchers.Warnings.LD_WARNING_MATCHER,
                ([, $1, $2]) => {
                    // Skip printing ld warnings when we're collecting multiline ld duplicate symbol warnings.
                    if (this.linkerFailure.isWarning) {
                        return '';
                    }
                    return formatter.formatLdWarning($1 + $2);
                },
            ],
            [Matchers_1.Matchers.Errors.LD_ERROR_MATCHER, ([, $1]) => formatter.formatError($1)],
            [
                Matchers_1.Matchers.LIBTOOL_MATCHER,
                ([, $1, $2, $3, $4]) => formatter.formatFileOperation({
                    type: 'Libtool',
                    filePath: $1,
                    fileName: $2,
                    target: $3,
                    project: $4,
                }),
            ],
            [
                Matchers_1.Matchers.LINKING_MATCHER,
                ([, $1, $2, $3, $4, $5, $6]) => formatter.formatFileOperation({
                    type: 'Ld',
                    filePath: $1,
                    fileName: $2,
                    linkType: $3,
                    arch: $4,
                    target: $5,
                    project: $6,
                }),
            ],
            [Matchers_1.Matchers.Errors.MODULE_INCLUDES_ERROR_MATCHER, ([, $1]) => formatter.formatError($1)],
            [
                Matchers_1.Matchers.TEST_CASE_MEASURED_MATCHER,
                ([, $1, $2, $3]) => formatter.formatMeasuringTest($1, $2, $3),
            ],
            [Matchers_1.Matchers.TEST_CASE_PENDING_MATCHER, ([, $1, $2]) => formatter.formatPendingTest($1, $2)],
            [
                Matchers_1.Matchers.TEST_CASE_PASSED_MATCHER,
                ([, $1, $2, $3]) => formatter.formatPassingTest($1, $2, $3),
            ],
            [Matchers_1.Matchers.Errors.PODS_ERROR_MATCHER, ([, $1]) => formatter.formatError($1)],
            [
                Matchers_1.Matchers.PROCESS_INFO_PLIST_MATCHER,
                ([, $1, $2, $3, $4]) => {
                    const [filePath, fileName] = unescaped([$1, $2]);
                    return formatter.formatFileOperation({
                        type: 'ProcessInfoPlistFile',
                        fileName,
                        filePath,
                        target: $3,
                        project: $4,
                    });
                },
            ],
            [
                Matchers_1.Matchers.PHASE_SCRIPT_EXECUTION_MATCHER,
                // @ts-ignore: spread
                ([, $1, $2, $3]) => formatter.formatPhaseScriptExecution(...unescaped([$1]), $2, $3),
            ],
            [Matchers_1.Matchers.PHASE_SUCCESS_MATCHER, ([, $1, $2]) => formatter.formatPhaseSuccess($1, $2)],
            [
                Matchers_1.Matchers.PROCESS_PCH_MATCHER,
                ([, 
                // pch / gch
                $1, 
                // filename
                $2, 
                // extra pch
                $3