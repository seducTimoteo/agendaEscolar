/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow strict
 * @format
 * @generated
 */

/*
 * !!! GENERATED FILE !!!
 *
 * Any manual changes to this file will be overwritten. To regenerate run `yarn build`.
 */

// lint directives to let us do some basic validation of generated files
/* eslint no-undef: 'error', no-unused-vars: ['error', {vars: "local"}], no-redeclare: 'error' */
/* global $NonMaybeType, Partial, $ReadOnly, $ReadOnlyArray */

'use strict';

import type {
  ESNode,
  AnyTypeAnnotation,
  ArrayExpression,
  ArrayPattern,
  ArrayTypeAnnotation,
  ArrowFunctionExpression,
  AsExpression,
  AssignmentExpression,
  AssignmentPattern,
  AwaitExpression,
  BigIntLiteralTypeAnnotation,
  BigIntTypeAnnotation,
  BinaryExpression,
  BlockStatement,
  BooleanLiteralTypeAnnotation,
  BooleanTypeAnnotation,
  BreakStatement,
  CallExpression,
  CatchClause,
  ChainExpression,
  ClassBody,
  ClassDeclaration,
  ClassExpression,
  ClassImplements,
  ComponentDeclaration,
  ComponentParameter,
  ComponentTypeAnnotation,
  ComponentTypeParameter,
  ConditionalExpression,
  ConditionalTypeAnnotation,
  ContinueStatement,
  DebuggerStatement,
  DeclareClass,
  DeclareComponent,
  DeclaredPredicate,
  DeclareEnum,
  DeclareExportAllDeclaration,
  DeclareExportDeclaration,
  DeclareFunction,
  DeclareHook,
  DeclareInterface,
  DeclareModule,
  DeclareModuleExports,
  DeclareNamespace,
  DeclareOpaqueType,
  DeclareTypeAlias,
  DeclareVariable,
  DoWhileStatement,
  EmptyStatement,
  EmptyTypeAnnotation,
  EnumBooleanBody,
  EnumBooleanMember,
  EnumDeclaration,
  EnumDefaultedMember,
  EnumNumberBody,
  EnumNumberMember,
  EnumStringBody,
  EnumStringMember,
  EnumSymbolBody,
  ExistsTypeAnnotation,
  ExportAllDeclaration,
  ExportDefaultDeclaration,
  ExportNamedDeclaration,
  ExportSpecifier,
  ExpressionStatement,
  ForInStatement,
  ForOfStatement,
  ForStatement,
  FunctionDeclaration,
  FunctionExpression,
  FunctionTypeAnnotation,
  FunctionTypeParam,
  GenericTypeAnnotation,
  HookDeclaration,
  HookTypeAnnotation,
  Identifier,
  IfStatement,
  ImportAttribute,
  ImportDeclaration,
  ImportDefaultSpecifier,
  ImportExpression,
  ImportNamespaceSpecifier,
  ImportSpecifier,
  IndexedAccessType,
  InferredPredicate,
  InferTypeAnnotation,
  InterfaceDeclaration,
  InterfaceExtends,
  InterfaceTypeAnnotation,
  IntersectionTypeAnnotation,
  JSXAttribute,
  JSXClosingElement,
  JSXClosingFragment,
  JSXElement,
  JSXEmptyExpression,
  JSXExpressionContainer,
  JSXFragment,
  JSXIdentifier,
  JSXMemberExpression,
  JSXNamespacedName,
  JSXOpeningElement,
  JSXOpeningFragment,
  JSXSpreadAttribute,
  JSXSpreadChild,
  JSXText,
  KeyofTypeAnnotation,
  LabeledStatement,
  LogicalExpression,
  MemberExpression,
  MetaProperty,
  MethodDefinition,
  MixedTypeAnnotation,
  NewExpression,
  NullableTypeAnnotation,
  NullLiteralTypeAnnotation,
  NumberLiteralTypeAnnotation,
  NumberTypeAnnotation,
  ObjectExpression,
  ObjectPattern,
  ObjectTypeAnnotation,
  ObjectTypeCallProperty,
  ObjectTypeIndexer,
  ObjectTypeInternalSlot,
  ObjectTypeMappedTypeProperty,
  ObjectTypeProperty,
  ObjectTypeSpreadProperty,
  OpaqueType,
  OptionalIndexedAccessType,
  PrivateIdentifier,
  Program,
  Property,
  PropertyDefinition,
  QualifiedTypeIdentifier,
  QualifiedTypeofIdentifier,
  RestElement,
  ReturnStatement,
  SequenceExpression,
  SpreadElement,
  StringLiteralTypeAnnotation,
  StringTypeAnnotation,
  Super,
  SwitchCase,
  SwitchStatement,
  SymbolTypeAnnotation,
  TaggedTemplateExpression,
  TemplateElement,
  TemplateLiteral,
  ThisExpression,
  ThisTypeAnnotation,
  ThrowStatement,
  TryStatement,
  TupleTypeAnnotation,
  TupleTypeLabeledElement,
  TupleTypeSpreadElement,
  TypeAlias,
  TypeAnnotation,
  TypeCastExpression,
  TypeofTypeAnnotation,
  TypeOperator,
  TypeParameter,
  TypeParameterDeclaration,
  TypeParameterInstantiation,
  TypePredicate,
  UnaryExpression,
  UnionTypeAnnotation,
  UpdateExpression,
  VariableDeclaration,
  VariableDeclarator,
  Variance,
  VoidTypeAnnotation,
  WhileStatement,
  WithStatement,
  YieldExpression,
  Literal,
} from '../types';

interface ArrayExpression_With_elements extends ArrayExpression {
  +elements: $NonMaybeType<ArrayExpression['elements']>;
}
interface ArrayExpression_With_trailingComma extends ArrayExpression {
  +trailingComma: $NonMaybeType<ArrayExpression['trailingComma']>;
}
interface ArrayPattern_With_elements extends ArrayPattern {
  +elements: $NonMaybeType<ArrayPattern['elements']>;
}
interface ArrayPattern_With_typeAnnotation extends ArrayPattern {
  +typeAnnotation: $NonMaybeType<ArrayPattern['typeAnnotation']>;
}
interface ArrayTypeAnnotation_With_elementType extends ArrayTypeAnnotation {
  +elementType: $NonMaybeType<ArrayTypeAnnotation['elementType']>;
}
interface ArrowFunctionExpression_With_id extends ArrowFunctionExpression {
  +id: $NonMaybeType<ArrowFunctionExpression['id']>;
}
interface ArrowFunctionExpression_With_params extends ArrowFunctionExpression {
  +params: $NonMaybeType<ArrowFunctionExpression['params']>;
}
interface ArrowFunctionExpression_With_body extends ArrowFunctionExpression {
  +body: $NonMaybeType<ArrowFunctionExpression['body']>;
}
interface ArrowFunctionExpression_With_typeParameters
  extends ArrowFunctionExpression {
  +typeParameters: $NonMaybeType<ArrowFunctionExpression['typeParameters']>;
}
interface ArrowFunctionExpression_With_returnType
  extends ArrowFunctionExpression {
  +returnType: $NonMaybeType<ArrowFunctionExpression['returnType']>;
}
interface ArrowFunctionExpression_With_predicate
  extends ArrowFunctionExpression {
  +predicate: $NonMaybeType<ArrowFunctionExpression['predicate']>;
}
interface ArrowFunctionExpression_With_expression
  extends ArrowFunctionExpression {
  +expression: $NonMaybeType<ArrowFunctionExpression['expression']>;
}
interface ArrowFunctionExpression_With_async extends ArrowFunctionExpression {
  +async: $NonMaybeType<ArrowFunctionExpression['async']>;
}
interface AsExpression_With_expression extends AsExpression {
  +expression: $NonMaybeType<AsExpression['expression']>;
}
interface AsExpression_With_typeAnnotation extends AsExpression {
  +typeAnnotation: $NonMaybeType<AsExpression['typeAnnotation']>;
}
interface AssignmentExpression_With_operator extends AssignmentExpression {
  +operator: $NonMaybeType<AssignmentExpression['operator']>;
}
interface AssignmentExpression_With_left extends AssignmentExpression {
  +left: $NonMaybeType<AssignmentExpression['left']>;
}
interface AssignmentExpression_With_right extends AssignmentExpression {
  +right: $NonMaybeType<AssignmentExpression['right']>;
}
interface AssignmentPattern_With_left extends AssignmentPattern {
  +left: $NonMaybeType<AssignmentPattern['left']>;
}
interface AssignmentPattern_With_right extends AssignmentPattern {
  +right: $NonMaybeType<AssignmentPattern['right']>;
}
interface AwaitExpression_With_argument extends AwaitExpression {
  +argument: $NonMaybeType<AwaitExpression['argument']>;
}
interface BigIntLiteralTypeAnnotation_With_raw
  extends BigIntLiteralTypeAnnotation {
  +raw: $NonMaybeType<BigIntLiteralTypeAnnotation['raw']>;
}
interface BinaryExpression_With_left extends BinaryExpression {
  +left: $NonMaybeType<BinaryExpression['left']>;
}
interface BinaryExpression_With_right extends BinaryExpression {
  +right: $NonMaybeType<BinaryExpression['right']>;
}
interface BinaryExpression_With_operator extends BinaryExpression {
  +operator: $NonMaybeType<BinaryExpression['operator']>;
}
interface BlockStatement_With_body extends BlockStatement {
  +body: $NonMaybeType<BlockStatement['body']>;
}
interface BooleanLiteralTypeAnnotation_With_value
  extends BooleanLiteralTypeAnnotation {
  +value: $NonMaybeType<BooleanLiteralTypeAnnotation['value']>;
}
interface BooleanLiteralTypeAnnotation_With_raw
  extends BooleanLiteralTypeAnnotation {
  +raw: $NonMaybeType<BooleanLiteralTypeAnnotation['raw']>;
}
interface BreakStatement_With_label extends BreakStatement {
  +label: $NonMaybeType<BreakStatement['label']>;
}
interface CallExpression_With_callee extends CallExpression {
  +callee: $NonMaybeType<CallExpression['callee']>;
}
interface CallExpression_With_typeArguments extends CallExpression {
  +typeArguments: $NonMaybeType<CallExpression['typeArguments']>;
}
interface CallExpression_With_arguments extends CallExpression {
  +arguments: $NonMaybeType<CallExpression['arguments']>;
}
interface CatchClause_With_param extends CatchClause {
  +param: $NonMaybeType<CatchClause['param']>;
}
interface CatchClause_With_body extends CatchClause {
  +body: $NonMaybeType<CatchClause['body']>;
}
interface ChainExpression_With_expression extends ChainExpression {
  +expression: $NonMaybeType<ChainExpression['expression']>;
}
interface ClassBody_With_body extends ClassBody {
  +body: $NonMaybeType<ClassBody['body']>;
}
interface ClassDeclaration_With_id extends ClassDeclaration {
  +id: $NonMaybeType<ClassDeclaration['id']>;
}
interface ClassDeclaration_With_typeParameters extends ClassDeclaration {
  +typeParameters: $NonMaybeType<ClassDeclaration['typeParameters']>;
}
interface ClassDeclaration_With_superClass extends ClassDeclaration {
  +superClass: $NonMaybeType<ClassDeclaration['superClass']>;
}
interface ClassDeclaration_With_superTypeParameters extends ClassDeclaration {
  +superTypeParameters: $NonMaybeType<ClassDeclaration['superTypeParameters']>;
}
interface ClassDeclaration_With_implements extends ClassDeclaration {
  +implements: $NonMaybeType<ClassDeclaration['implements']>;
}
interface ClassDeclaration_With_decorators extends ClassDeclaration {
  +decorators: $NonMaybeType<ClassDeclaration['decorators']>;
}
interface ClassDeclaration_With_body extends ClassDeclaration {
  +body: $NonMaybeType<ClassDeclaration['body']>;
}
interface ClassExpression_With_id extends ClassExpression {
  +id: $NonMaybeType<ClassExpression['id']>;
}
interface ClassExpression_With_typeParameters extends ClassExpression {
  +typeParameters: $NonMaybeType<ClassExpression['typeParameters']>;
}
interface ClassExpression_With_superClass extends ClassExpression {
  +superClass: $NonMaybeType<ClassExpression['superClass']>;
}
interface ClassExpression_With_superTypeParameters extends ClassExpression {
  +superTypeParameters: $NonMaybeType<ClassExpression['superTypeParameters']>;
}
interface ClassExpression_With_implements extends ClassExpression {
  +implements: $NonMaybeType<ClassExpression['implements']>;
}
interface ClassExpression_With_decorators extends ClassExpression {
  +decorators: $NonMaybeType<ClassExpression['decorators']>;
}
interface ClassExpression_With_body extends ClassExpression {
  +body: $NonMaybeType<ClassExpression['body']>;
}
interface ClassImplements_With_id extends ClassImplements {
  +id: $NonMaybeType<ClassImplements['id']>;
}
interface ClassImplements_With_typeParameters extends ClassImplements {
  +typeParameters: $NonMaybeType<ClassImplements['typeParameters']>;
}
interface ComponentDeclaration_With_id extends ComponentDeclaration {
  +id: $NonMaybeType<ComponentDeclaration['id']>;
}
interface ComponentDeclaration_With_params extends ComponentDeclaration {
  +params: $NonMaybeType<ComponentDeclaration['params']>;
}
interface ComponentDeclaration_With_body extends ComponentDeclaration {
  +body: $NonMaybeType<ComponentDeclaration['body']>;
}
interface ComponentDeclaration_With_typeParameters
  extends ComponentDeclaration {
  +typeParameters: $NonMaybeType<ComponentDeclaration['typeParameters']>;
}
interface ComponentDeclaration_With_rendersType extends ComponentDeclaration {
  +rendersType: $NonMaybeType<ComponentDeclaration['rendersType']>;
}
interface ComponentParameter_With_name extends ComponentParameter {
  +name: $NonMaybeType<ComponentParameter['name']>;
}
interface ComponentParameter_With_local extends ComponentParameter {
  +local: $NonMaybeType<ComponentParameter['local']>;
}
interface ComponentParameter_With_shorthand extends ComponentParameter {
  +shorthand: $NonMaybeType<ComponentParameter['shorthand']>;
}
interface ComponentTypeAnnotation_With_params extends ComponentTypeAnnotation {
  +params: $NonMaybeType<ComponentTypeAnnotation['params']>;
}
interface ComponentTypeAnnotation_With_rest extends ComponentTypeAnnotation {
  +rest: $NonMaybeType<ComponentTypeAnnotation['rest']>;
}
interface ComponentTypeAnnotation_With_typeParameters
  extends ComponentTypeAnnotation {
  +typeParameters: $NonMaybeType<ComponentTypeAnnotation['typeParameters']>;
}
interface ComponentTypeAnnotation_With_rendersType
  extends ComponentTypeAnnotation {
  +rendersType: $NonMaybeType<ComponentTypeAnnotation['rendersType']>;
}
interface ComponentTypeParameter_With_name extends ComponentTypeParameter {
  +name: $NonMaybeType<ComponentTypeParameter['name']>;
}
interface ComponentTypeParameter_With_typeAnnotation
  extends ComponentTypeParameter {
  +typeAnnotation: $NonMaybeType<ComponentTypeParameter['typeAnnotation']>;
}
interface ComponentTypeParameter_With_optional extends ComponentTypeParameter {
  +optional: $NonMaybeType<ComponentTypeParameter['optional']>;
}
interface ConditionalExpression_With_test extends ConditionalExpression {
  +test: $NonMaybeType<ConditionalExpression['test']>;
}
interface ConditionalExpression_With_alternate extends ConditionalExpression {
  +alternate: $NonMaybeType<ConditionalExpression['alternate']>;
}
interface ConditionalExpression_With_consequent extends ConditionalExpression {
  +consequent: $NonMaybeType<ConditionalExpression['consequent']>;
}
interface ConditionalTypeAnnotation_With_checkType
  extends ConditionalTypeAnnotation {
  +checkType: $NonMaybeType<ConditionalTypeAnnotation['checkType']>;
}
interface ConditionalTypeAnnotation_With_extendsType
  extends ConditionalTypeAnnotation {
  +extendsType: $NonMaybeType<ConditionalTypeAnnotation['extendsType']>;
}
interface ConditionalTypeAnnotation_With_trueType
  extends ConditionalTypeAnnotation {
  +trueType: $NonMaybeType<ConditionalTypeAnnotation['trueType']>;
}
interface ConditionalTypeAnnotation_With_falseType
  extends ConditionalTypeAnnotation {
  +falseType: $NonMaybeType<ConditionalTypeAnnotation['falseType']>;
}
interface ContinueStatement_With_label extends ContinueStatement {
  +label: $NonMaybeType<ContinueStatement['label']>;
}
interface DeclareClass_With_id extends DeclareClass {
  +id: $NonMaybeType<DeclareClass['id']>;
}
interface DeclareClass_With_typeParameters extends DeclareClass {
  +typeParameters: $NonMaybeType<DeclareClass['typeParameters']>;
}
interface DeclareClass_With_extends extends DeclareClass {
  +extends: $NonMaybeType<DeclareClass['extends']>;
}
interface DeclareClass_With_implements extends DeclareClass {
  +implements: $NonMaybeType<DeclareClass['implements']>;
}
interface DeclareClass_With_mixins extends DeclareClass {
  +mixins: $NonMaybeType<DeclareClass['mixins']>;
}
interface DeclareClass_With_body extends DeclareClass {
  +body: $NonMaybeType<DeclareClass['body']>;
}
interface DeclareComponent_With_id extends DeclareComponent {
  +id: $NonMaybeType<DeclareComponent['id']>;
}
interface DeclareComponent_With_params extends DeclareComponent {
  +params: $NonMaybeType<DeclareComponent['params']>;
}
interface DeclareComponent_With_rest extends DeclareComponent {
  +rest: $NonMaybeType<DeclareComponent['rest']>;
}
interface DeclareComponent_With_typeParameters extends DeclareComponent {
  +typeParameters: $NonMaybeType<DeclareComponent['typeParameters']>;
}
interface DeclareComponent_With_rendersType extends DeclareComponent {
  +rendersType: $NonMaybeType<DeclareComponent['rendersType']>;
}
interface DeclaredPredicate_With_value extends DeclaredPredicate {
  +value: $NonMaybeType<DeclaredPredicate['value']>;
}
interface DeclareEnum_With_id extends DeclareEnum {
  +id: $NonMaybeType<DeclareEnum['id']>;
}
interface DeclareEnum_With_body extends DeclareEnum {
  +body: $NonMaybeType<DeclareEnum['body']>;
}
interface DeclareExportAllDeclaration_With_source
  extends DeclareExportAllDeclaration {
  +source: $NonMaybeType<DeclareExportAllDeclaration['source']>;
}
interface DeclareExportDeclaration_With_declaration
  extends DeclareExportDeclaration {
  +declaration: $NonMaybeType<DeclareExportDeclaration['declaration']>;
}
interface DeclareExportDeclaration_With_specifiers
  extends DeclareExportDeclaration {
  +specifiers: $NonMaybeType<DeclareExportDeclaration['specifiers']>;
}
interface DeclareExportDeclaration_With_source
  extends DeclareExportDeclaration {
  +source: $NonMaybeType<DeclareExportDeclaration['source']>;
}
interface DeclareExportDeclaration_With_default
  extends DeclareExportDeclaration {
  +default: $NonMaybeType<DeclareExportDeclaration['default']>;
}
interface DeclareFunction_With_id extends DeclareFunction {
  +id: $NonMaybeType<DeclareFunction['id']>;
}
interface DeclareFunction_With_predicate extends DeclareFunction {
  +predicate: $NonMaybeType<DeclareFunction['predicate']>;
}
interface DeclareHook_With_id extends DeclareHook {
  +id: $NonMaybeType<DeclareHook['id']>;
}
interface DeclareInterface_With_id extends DeclareInterface {
  +id: $NonMaybeType<DeclareInterface['id']>;
}
interface DeclareInterface_With_typeParameters extends DeclareInterface {
  +typeParameters: $NonMaybeType<DeclareInterface['typeParameters']>;
}
interface DeclareInterface_With_extends extends DeclareInterface {
  +extends: $NonMaybeType<DeclareInterface['extends']>;
}
interface DeclareInterface_With_body extends DeclareInterface {
  +body: $NonMaybeType<DeclareInterface['body']>;
}
interface DeclareModule_With_id extends DeclareModule {
  +id: $NonMaybeType<DeclareModule['id']>;
}
interface DeclareModule_With_body extends DeclareModule {
  +body: $NonMaybeType<DeclareModule['body']>;
}
interface DeclareModuleExports_With_typeAnnotation
  extends DeclareModuleExports {
  +typeAnnotation: $NonMaybeType<DeclareModuleExports['typeAnnotation']>;
}
interface DeclareNamespace_With_id extends DeclareNamespace {
  +id: $NonMaybeType<DeclareNamespace['id']>;
}
interface DeclareNamespace_With_body extends DeclareNamespace {
  +body: $NonMaybeType<DeclareNamespace['body']>;
}
interface DeclareOpaqueType_With_id extends DeclareOpaqueType {
  +id: $NonMaybeType<DeclareOpaqueType['id']>;
}
interface DeclareOpaqueType_With_typeParameters extends DeclareOpaqueType {
  +typeParameters: $NonMaybeType<DeclareOpaqueType['typeParameters']>;
}
interface DeclareOpaqueType_With_impltype extends DeclareOpaqueType {
  +impltype: $NonMaybeType<DeclareOpaqueType['impltype']>;
}
interface DeclareOpaqueType_With_supertype extends DeclareOpaqueType {
  +supertype: $NonMaybeType<DeclareOpaqueType['supertype']>;
}
interface DeclareTypeAlias_With_id extends DeclareTypeAlias {
  +id: $NonMaybeType<DeclareTypeAlias['id']>;
}
interface DeclareTypeAlias_With_typeParameters extends DeclareTypeAlias {
  +typeParameters: $NonMaybeType<DeclareTypeAlias['typeParameters']>;
}
interface DeclareTypeAlias_With_right extends DeclareTypeAlias {
  +right: $NonMaybeType<DeclareTypeAlias['right']>;
}
interface DeclareVariable_With_id extends DeclareVariable {
  +id: $NonMaybeType<DeclareVariable['id']>;
}
interface DeclareVariable_With_kind extends DeclareVariable {
  +kind: $NonMaybeType<DeclareVariable['kind']>;
}
interface DoWhileStatement_With_body extends DoWhileStatement {
  +body: $NonMaybeType<DoWhileStatement['body']>;
}
interface DoWhileStatement_With_test extends DoWhileStatement {
  +test: $NonMaybeType<DoWhileStatement['test']>;
}
interface EnumBooleanBody_With_members extends EnumBooleanBody {
  +members: $NonMaybeType<EnumBooleanBody['members']>;
}
interface EnumBooleanBody_With_explicitType extends EnumBooleanBody {
  +explicitType: $NonMaybeType<EnumBooleanBody['explicitType']>;
}
interface EnumBooleanBody_With_hasUnknownMembers extends EnumBooleanBody {
  +hasUnknownMembers: $NonMaybeType<EnumBooleanBody['hasUnknownMembers']>;
}
interface EnumBooleanMember_With_id extends EnumBooleanMember {
  +id: $NonMaybeType<EnumBooleanMember['id']>;
}
interface EnumBooleanMember_With_init extends EnumBooleanMember {
  +init: $NonMaybeType<EnumBooleanMember['init']>;
}
interface EnumDeclaration_With_id extends EnumDeclaration {
  +id: $NonMaybeType<EnumDeclaration['id']>;
}
interface EnumDeclaration_With_body extends EnumDeclaration {
  +body: $NonMaybeType<EnumDeclaration['body']>;
}
interface EnumDefaultedMember_With_id extends EnumDefaultedMember {
  +id: $NonMaybeType<EnumDefaultedMember['id']>;
}
interface EnumNumberBody_With_members extends EnumNumberBody {
  +members: $NonMaybeType<EnumNumberBody['members']>;
}
interface EnumNumberBody_With_explicitType extends EnumNumberBody {
  +explicitType: $NonMaybeType<EnumNumberBody['explicitType']>;
}
interface EnumNumberBody_With_hasUnknownMembers extends EnumNumberBody {
  +hasUnknownMembers: $NonMaybeType<EnumNumberBody['hasUnknownMembers']>;
}
interface EnumNumberMember_With_id extends EnumNumberMember {
  +id: $NonMaybeType<EnumNumberMember['id']>;
}
interface EnumNumberMember_With_init extends EnumNumberMember {
  +init: $NonMaybeType<EnumNumberMember['init']>;
}
interface EnumStringBody_With_members extends EnumStringBody {
  +members: $NonMaybeType<EnumStringBody['members']>;
}
interface EnumStringBody_With_explicitType extends EnumStringBody {
  +explicitType: $NonMaybeType<EnumStringBody['explicitType']>;
}
interface EnumStringBody_With_hasUnknownMembers extends EnumStringBody {
  +hasUnknownMembers: $NonMaybeType<EnumStringBody['hasUnknownMembers']>;
}
interface EnumStringMember_With_id extends EnumStringMember {
  +id: $NonMaybeType<EnumStringMember['id']>;
}
interface EnumStringMember_With_init extends EnumStringMember {
  +init: $NonMaybeType<EnumStringMember['init']>;
}
interface EnumSymbolBody_With_members extends EnumSymbolBody {
  +members: $NonMaybeType<EnumSymbolBody['members']>;
}
interface EnumSymbolBody_With_hasUnknownMembers extends EnumSymbolBody {
  +hasUnknownMembers: $NonMaybeType<EnumSymbolBody['hasUnknownMembers']>;
}
interface ExportAllDeclaration_With_exported extends ExportAllDeclaration {
  +exported: $NonMaybeType<ExportAllDeclaration['exported']>;
}
interface ExportAllDeclaration_With_source extends ExportAllDeclaration {
  +source: $NonMaybeType<ExportAllDeclaration['source']>;
}
interface ExportAllDeclaration_With_exportKind extends ExportAllDeclaration {
  +exportKind: $NonMaybeType<ExportAllDeclaration['exportKind']>;
}
interface ExportDefaultDeclaration_With_declaration
  extends ExportDefaultDeclaration {
  +declaration: $NonMaybeType<ExportDefaultDeclaration['declaration']>;
}
interface ExportNamedDeclaration_With_declaration
  extends ExportNamedDeclaration {
  +declaration: $NonMaybeType<ExportNamedDeclaration['declaration']>;
}
interface ExportNamedDeclaration_With_specifiers
  extends ExportNamedDeclaration {
  +specifiers: $NonMaybeType<ExportNamedDeclaration['specifiers']>;
}
interface ExportNamedDeclaration_With_source extends ExportNamedDeclaration {
  +source: $NonMaybeType<ExportNamedDeclaration['source']>;
}
interface ExportNamedDeclaration_With_exportKind
  extends ExportNamedDeclaration {
  +exportKind: $NonMaybeType<ExportNamedDeclaration['exportKind']>;
}
interface ExportSpecifier_With_exported extends ExportSpecifier {
  +exported: $NonMaybeType<ExportSpecifier['exported']>;
}
interface ExportSpecifier_With_local extends ExportSpecifier {
  +local: $NonMaybeType<ExportSpecifier['local']>;
}
interface ExpressionStatement_With_expression extends ExpressionStatement {
  +expression: $NonMaybeType<ExpressionStatement['expression']>;
}
interface ExpressionStatement_With_directive extends ExpressionStatement {
  +directive: $NonMaybeType<ExpressionStatement['directive']>;
}
interface ForInStatement_With_left extends ForInStatement {
  +left: $NonMaybeType<ForInStatement['left']>;
}
interface ForInStatement_With_right extends ForInStatement {
  +right: $NonMaybeType<ForInStatement['right']>;
}
interface ForInStatement_With_body extends ForInStatement {
  +body: $NonMaybeType<ForInStatement['body']>;
}
interface ForOfStatement_With_left extends ForOfStatement {
  +left: $NonMaybeType<ForOfStatement['left']>;
}
interface ForOfStatement_With_right extends ForOfStatement {
  +right: $NonMaybeType<ForOfStatement['right']>;
}
interface ForOfStatement_With_body extends ForOfStatement {
  +body: $NonMaybeType<ForOfStatement['body']>;
}
interface ForOfStatement_With_await extends ForOfStatement {
  +await: $NonMaybeType<ForOfStatement['await']>;
}
interface ForStatement_With_init extends ForStatement {
  +init: $NonMaybeType<ForStatement['init']>;
}
interface ForStatement_With_test extends ForStatement {
  +test: $NonMaybeType<ForStatement['test']>;
}
interface ForStatement_With_update extends ForStatement {
  +update: $NonMaybeType<ForStatement['update']>;
}
interface ForStatement_With_body extends ForStatement {
  +body: $NonMaybeType<ForStatement['body']>;
}
interface FunctionDeclaration_With_id extends FunctionDeclaration {
  +id: $NonMaybeType<FunctionDeclaration['id']>;
}
interface FunctionDeclaration_With_params extends FunctionDeclaration {
  +params: $NonMaybeType<FunctionDeclaration['params']>;
}
interface FunctionDeclaration_With_body extends FunctionDeclaration {
  +body: $NonMaybeType<FunctionDeclaration['body']>;
}
interface FunctionDeclaration_With_typeParameters extends FunctionDeclaration {
  +typeParameters: $NonMaybeType<FunctionDeclaration['typeParameters']>;
}
interface FunctionDeclaration_With_returnType extends FunctionDeclaration {
  +returnType: $NonMaybeType<FunctionDeclaration['returnType']>;
}
interface FunctionDeclaration_With_predicate extends FunctionDeclaration {
  +predicate: $NonMaybeType<FunctionDeclaration['predicate']>;
}
interface FunctionDeclaration_With_generator extends FunctionDeclaration {
  +generator: $NonMaybeType<FunctionDeclaration['generator']>;
}
interface FunctionDeclaration_With_async extends FunctionDeclaration {
  +async: $NonMaybeType<FunctionDeclaration['async']>;
}
interface FunctionExpression_With_id extends FunctionExpression {
  +id: $NonMaybeType<FunctionExpression['id']>;
}
interface FunctionExpression_With_params extends FunctionExpression {
  +params: $NonMaybeType<FunctionExpression['params']>;
}
interface FunctionExpression_With_body extends FunctionExpression {
  +body: $NonMaybeType<FunctionExpression['body']>;
}
interface FunctionExpression_With_typeParameters extends FunctionExpression {
  +typeParameters: $NonMaybeType<FunctionExpression['typeParameters']>;
}
interface FunctionExpression_With_returnType extends FunctionExpression {
  +returnType: $NonMaybeType<FunctionExpression['returnType']>;
}
interface FunctionExpression_With_predicate extends FunctionExpression {
  +predicate: $NonMaybeType<FunctionExpression['predicate']>;
}
interface FunctionExpression_With_generator extends FunctionExpression {
  +generator: $NonMaybeType<FunctionExpression['generator']>;
}
interface FunctionExpression_With_async extends FunctionExpression {
  +async: $NonMaybeType<FunctionExpression['async']>;
}
interface FunctionTypeAnnotation_With_params extends FunctionTypeAnnotation {
  +params: $NonMaybeType<FunctionTypeAnnotation['params']>;
}
interface FunctionTypeAnnotation_With_this extends FunctionTypeAnnotation {
  +this: $NonMaybeType<FunctionTypeAnnotation['this']>;
}
interface FunctionTypeAnnotation_With_returnType
  extends FunctionTypeAnnotation {
  +returnType: $NonMaybeType<FunctionTypeAnnotation['returnType']>;
}
interface FunctionTypeAnnotation_With_rest extends FunctionTypeAnnotation {
  +rest: $NonMaybeType<FunctionTypeAnnotation['rest']>;
}
interface FunctionTypeAnnotation_With_typeParameters
  extends FunctionTypeAnnotation {
  +typeParameters: $NonMaybeType<FunctionTypeAnnotation['typeParameters']>;
}
interface FunctionTypeParam_With_name extends FunctionTypeParam {
  +name: $NonMaybeType<FunctionTypeParam['name']>;
}
interface FunctionTypeParam_With_typeAnnotation extends FunctionTypeParam {
  +typeAnnotation: $NonMaybeType<FunctionTypeParam['typeAnnotation']>;
}
interface FunctionTypeParam_With_optional extends FunctionTypeParam {
  +optional: $NonMaybeType<FunctionTypeParam['optional']>;
}
interface GenericTypeAnnotation_With_id extends GenericTypeAnnotation {
  +id: $NonMaybeType<GenericTypeAnnotation['id']>;
}
interface GenericTypeAnnotation_With_typeParameters
  extends GenericTypeAnnotation {
  +typeParameters: $NonMaybeType<GenericTypeAnnotation['typeParameters']>;
}
interface HookDeclaration_With_id extends HookDeclaration {
  +id: $NonMaybeType<HookDeclaration['id']>;
}
interface HookDeclaration_With_params extends HookDeclaration {
  +params: $NonMaybeType<HookDeclaration['params']>;
}
interface HookDeclaration_With_body extends HookDeclaration {
  +body: $NonMaybeType<HookDeclaration['body']>;
}
interface HookDeclaration_With_typeParameters extends HookDeclaration {
  +typeParameters: $NonMaybeType<HookDeclaration['typeParameters']>;
}
interface HookDeclaration_With_returnType extends HookDeclaration {
  +returnType: $NonMaybeType<HookDeclaration['returnType']>;
}
interface HookTypeAnnotation_With_params extends HookTypeAnnotation {
  +params: $NonMaybeType<HookTypeAnnotation['params']>;
}
interface HookTypeAnnotation_With_returnType extends HookTypeAnnotation {
  +returnType: $NonMaybeType<HookTypeAnnotation['returnType']>;
}
interface HookTypeAnnotation_With_rest extends HookTypeAnnotation {
  +rest: $NonMaybeType<HookTypeAnnotation['rest']>;
}
interface HookTypeAnnotation_With_typeParameters extends HookTypeAnnotation {
  +typeParameters: $NonMaybeType<HookTypeAnnotation['typeParameters']>;
}
interface Identifier_With_name extends Identifier {
  +name: $NonMaybeType<Identifier['name']>;
}
interface Identifier_With_typeAnnotation extends Identifier {
  +typeAnnotation: $NonMaybeType<Identifier['typeAnnotation']>;
}
interface Identifier_With_optional extends Identifier {
  +optional: $NonMaybeType<Identifier['optional']>;
}
interface IfStatement_With_test extends IfStatement {
  +test: $NonMaybeType<IfStatement['test']>;
}
interface IfStatement_With_consequent extends IfStatement {
  +consequent: $NonMaybeType<IfStatement['consequent']>;
}
interface IfStatement_With_alternate extends IfStatement {
  +alternate: $NonMaybeType<IfStatement['alternate']>;
}
interface ImportAttribute_With_key extends ImportAttribute {
  +key: $NonMaybeType<ImportAttribute['key']>;
}
interface ImportAttribute_With_value extends ImportAttribute {
  +value: $NonMaybeType<ImportAttribute['value']>;
}
interface ImportDeclaration_With_specifiers extends ImportDeclaration {
  +specifiers: $NonMaybeType<ImportDeclaration['specifiers']>;
}
interface ImportDeclaration_With_source extends ImportDeclaration {
  +source: $NonMaybeType<ImportDeclaration['source']>;
}
interface ImportDeclaration_With_assertions extends ImportDeclaration {
  +assertions: $NonMaybeType<ImportDeclaration['assertions']>;
}
interface ImportDeclaration_With_importKind extends ImportDeclaration {
  +importKind: $NonMaybeType<ImportDeclaration['importKind']>;
}
interface ImportDefaultSpecifier_With_local extends ImportDefaultSpecifier {
  +local: $NonMaybeType<ImportDefaultSpecifier['local']>;
}
interface ImportExpression_With_source extends ImportExpression {
  +source: $NonMaybeType<ImportExpression['source']>;
}
interface ImportExpression_With_attributes extends ImportExpression {
  +attributes: $NonMaybeType<ImportExpression['attributes']>;
}
interface ImportNamespaceSpecifier_With_local extends ImportNamespaceSpecifier {
  +local: $NonMaybeType<ImportNamespaceSpecifier['local']>;
}
interface ImportSpecifier_With_imported extends ImportSpecifier {
  +imported: $NonMaybeType<ImportSpecifier['imported']>;
}
interface ImportSpecifier_With_local extends ImportSpecifier {
  +local: $NonMaybeType<ImportSpecifier['local']>;
}
interface ImportSpecifier_With_importKind extends ImportSpecifier {
  +importKind: $NonMaybeType<ImportSpecifier['importKind']>;
}
interface IndexedAccessType_With_objectType extends IndexedAccessType {
  +objectType: $NonMaybeType<IndexedAccessType['objectType']>;
}
interface IndexedAccessType_With_indexType extends IndexedAccessType {
  +indexType: $NonMaybeType<IndexedAccessType['indexType']>;
}
interface InferTypeAnnotation_With_typeParameter extends InferTypeAnnotation {
  +typeParameter: $NonMaybeType<InferTypeAnnotation['typeParameter']>;
}
interface InterfaceDeclaration_With_id extends InterfaceDeclaration {
  +id: $NonMaybeType<InterfaceDeclaration['id']>;
}
interface InterfaceDeclaration_With_typeParameters
  extends InterfaceDeclaration {
  +typeParameters: $NonMaybeType<InterfaceDeclaration['typeParameters']>;
}
interface InterfaceDeclaration_With_extends extends InterfaceDeclaration {
  +extends: $NonMaybeType<InterfaceDeclaration['extends']>;
}
interface InterfaceDeclaration_With_body extends InterfaceDeclaration {
  +body: $NonMaybeType<InterfaceDeclaration['body']>;
}
interface InterfaceExtends_With_id extends InterfaceExtends {
  +id: $NonMaybeType<InterfaceExtends['id']>;
}
interface InterfaceExtends_With_typeParameters extends InterfaceExtends {
  +typeParameters: $NonMaybeType<InterfaceExtends['typeParameters']>;
}
interface InterfaceTypeAnnotation_With_extends extends InterfaceTypeAnnotation {
  +extends: $NonMaybeType<InterfaceTypeAnnotation['extends']>;
}
interface InterfaceTypeAnnotation_With_body extends InterfaceTypeAnnotation {
  +body: $NonMaybeType<InterfaceTypeAnnotation['body']>;
}
interface IntersectionTypeAnnotation_With_types
  extends IntersectionTypeAnnotation {
  +types: $NonMaybeType<IntersectionTypeAnnotation['types']>;
}
interface JSXAttribute_With_name extends JSXAttribute {
  +name: $NonMaybeType<JSXAttribute['name']>;
}
interface JSXAttribute_With_value extends JSXAttribute {
  +value: $NonMaybeType<JSXAttribute['value']>;
}
interface JSXClosingElement_With_name extends JSXClosingElement {
  +name: $NonMaybeType<JSXClosingElement['name']>;
}
interface JSXElement_With_openingElement extends JSXElement {
  +openingElement: $NonMaybeType<JSXElement['openingElement']>;
}
interface JSXElement_With_children extends JSXElement {
  +children: $NonMaybeType<JSXElement['children']>;
}
interface JSXElement_With_closingElement extends JSXElement {
  +closingElement: $NonMaybeType<JSXElement['closingElement']>;
}
interface JSXExpressionContainer_With_expression
  extends JSXExpressionContainer {
  +expression: $NonMaybeType<JSXExpressionContainer['expression']>;
}
interface JSXFragment_With_openingFragment extends JSXFragment {
  +openingFragment: $NonMaybeType<JSXFragment['openingFragment']>;
}
interface JSXFragment_With_children extends JSXFragment {
  +children: $NonMaybeType<JSXFragment['children']>;
}
interface JSXFragment_With_closingFragment extends JSXFragment {
  +closingFragment: $NonMaybeType<JSXFragment['closingFragment']>;
}
interface JSXIdentifier_With_name extends JSXIdentifier {
  +name: $NonMaybeType<JSXIdentifier['name']>;
}
interface JSXMemberExpression_With_object extends JSXMemberExpression {
  +object: $NonMaybeType<JSXMemberExpression['object']>;
}
interface JSXMemberExpression_With_property extends JSXMemberExpression {
  +property: $NonMaybeType<JSXMemberExpression['property']>;
}
interface JSXNamespacedName_With_namespace extends JSXNamespacedName {
  +namespace: $NonMaybeType<JSXNamespacedName['namespace']>;
}
interface JSXNamespacedName_With_name extends JSXNamespacedName {
  +name: $NonMaybeType<JSXNamespacedName['name']>;
}
interface JSXOpeningElement_With_name extends JSXOpeningElement {
  +name: $NonMaybeType<JSXOpeningElement['name']>;
}
interface JSXOpeningElement_With_attributes extends JSXOpeningElement {
  +attributes: $NonMaybeType<JSXOpeningElement['attributes']>;
}
interface JSXOpeningElement_With_selfClosing extends JSXOpeningElement {
  +selfClosing: $NonMaybeType<JSXOpeningElement['selfClosing']>;
}
interface JSXOpeningElement_With_typeArguments extends JSXOpeningElement {
  +typeArguments: $NonMaybeType<JSXOpeningElement['typeArguments']>;
}
interface JSXSpreadAttribute_With_argument extends JSXSpreadAttribute {
  +argument: $NonMaybeType<JSXSpreadAttribute['argument']>;
}
interface JSXSpreadChild_With_expression extends JSXSpreadChild {
  +expression: $NonMaybeType<JSXSpreadChild['expression']>;
}
interface JSXText_With_value extends JSXText {
  +value: $NonMaybeType<JSXText['value']>;
}
interface JSXText_With_raw extends JSXText {
  +raw: $NonMaybeType<JSXText['raw']>;
}
interface KeyofTypeAnnotation_With_argument extends KeyofTypeAnnotation {
  +argument: $NonMaybeType<KeyofTypeAnnotation['argument']>;
}
interface LabeledStatement_With_label extends LabeledStatement {
  +label: $NonMaybeType<LabeledStatement['label']>;
}
interface LabeledStatement_With_body extends LabeledStatement {
  +body: $NonMaybeType<LabeledStatement['body']>;
}
interface LogicalExpression_With_left extends LogicalExpression {
  +left: $NonMaybeType<LogicalExpression['left']>;
}
interface LogicalExpression_With_right extends LogicalExpression {
  +right: $NonMaybeType<LogicalExpression['right']>;
}
interface LogicalExpression_With_operator extends LogicalExpression {
  +operator: $NonMaybeType<LogicalExpression['operator']>;
}
interface MemberExpression_With_object extends MemberExpression {
  +object: $NonMaybeType<MemberExpression['object']>;
}
interface MemberExpression_With_property extends MemberExpression {
  +property: $NonMaybeType<MemberExpression['property']>;
}
interface MemberExpression_With_computed extends MemberExpression {
  +computed: $NonMaybeType<MemberExpression['computed']>;
}
interface MetaProperty_With_meta extends MetaProperty {
  +meta: $NonMaybeType<MetaProperty['meta']>;
}
interface MetaProperty_With_property extends MetaProperty {
  +property: $NonMaybeType<MetaProperty['property']>;
}
interface MethodDefinition_With_key extends MethodDefinition {
  +key: $NonMaybeType<MethodDefinition['key']>;
}
interface MethodDefinition_With_value extends MethodDefinition {
  +value: $NonMaybeType<MethodDefinition['value']>;
}
interface MethodDefinition_With_kind extends MethodDefinition {
  +kind: $NonMaybeType<MethodDefinition['kind']>;
}
interface MethodDefinition_With_computed extends MethodDefinition {
  +computed: $NonMaybeType<MethodDefinition['computed']>;
}
interface MethodDefinition_With_static extends MethodDefinition {
  +static: $NonMaybeType<MethodDefinition['static']>;
}
interface NewExpression_With_callee extends NewExpression {
  +callee: $NonMaybeType<NewExpression['callee']>;
}
interface NewExpression_With_typeArguments extends NewExpression {
  +typeArguments: $NonMaybeType<NewExpression['typeArguments']>;
}
interface NewExpression_With_arguments extends NewExpression {
  +arguments: $NonMaybeType<NewExpression['arguments']>;
}
interface NullableTypeAnnotation_With_typeAnnotation
  extends NullableTypeAnnotation {
  +typeAnnotation: $NonMaybeType<NullableTypeAnnotation['typeAnnotation']>;
}
interface NumberLiteralTypeAnnotation_With_value
  extends NumberLiteralTypeAnnotation {
  +value: $NonMaybeType<NumberLiteralTypeAnnotation['value']>;
}
interface NumberLiteralTypeAnnotation_With_raw
  extends NumberLiteralTypeAnnotation {
  +raw: $NonMaybeType<NumberLiteralTypeAnnotation['raw']>;
}
interface ObjectExpression_With_properties extends ObjectExpression {
  +properties: $NonMaybeType<ObjectExpression['properties']>;
}
interface ObjectPattern_With_properties extends ObjectPattern {
  +properties: $NonMaybeType<ObjectPattern['properties']>;
}
interface ObjectPattern_With_typeAnnotation extends ObjectPattern {
  +typeAnnotation: $NonMaybeType<ObjectPattern['typeAnnotation']>;
}
interface ObjectTypeAnnotation_With_properties extends ObjectTypeAnnotation {
  +properties: $NonMaybeType<ObjectTypeAnnotation['properties']>;
}
interface ObjectTypeAnnotation_With_indexers extends ObjectTypeAnnotation {
  +indexers: $NonMaybeType<ObjectTypeAnnotation['indexers']>;
}
interface ObjectTypeAnnotation_With_callProperties
  extends ObjectTypeAnnotation {
  +callProperties: $NonMaybeType<ObjectTypeAnnotation['callProperties']>;
}
interface ObjectTypeAnnotation_With_internalSlots extends ObjectTypeAnnotation {
  +internalSlots: $NonMaybeType<ObjectTypeAnnotation['internalSlots']>;
}
interface ObjectTypeAnnotation_With_inexact extends ObjectTypeAnnotation {
  +inexact: $NonMaybeType<ObjectTypeAnnotation['inexact']>;
}
interface ObjectTypeAnnotation_With_exact extends ObjectTypeAnnotation {
  +exact: $NonMaybeType<ObjectTypeAnnotation['exact']>;
}
interface ObjectTypeCallProperty_With_value extends ObjectTypeCallProperty {
  +value: $NonMaybeType<ObjectTypeCallProperty['value']>;
}
interface ObjectTypeCallProperty_With_static extends ObjectTypeCallProperty {
  +static: $NonMaybeType<ObjectTypeCallProperty['static']>;
}
interface ObjectTypeIndexer_With_id extends ObjectTypeIndexer {
  +id: $NonMaybeType<ObjectTypeIndexer['id']>;
}
interface ObjectTypeIndexer_With_key extends ObjectTypeIndexer {
  +key: $NonMaybeType<ObjectTypeIndexer['key']>;
}
interface ObjectTypeIndexer_With_value extends ObjectTypeIndexer {
  +value: $NonMaybeType<ObjectTypeIndexer['value']>;
}
interface ObjectTypeIndexer_With_static extends ObjectTypeIndexer {
  +static: $NonMaybeType<ObjectTypeIndexer['static']>;
}
interface ObjectTypeIndexer_With_variance extends ObjectTypeIndexer {
  +variance: $NonMaybeType<ObjectTypeIndexer['variance']>;
}
interface ObjectTypeInternalSlot_With_id extends ObjectTypeInternalSlot {
  +id: $NonMaybeType<ObjectTypeInternalSlot['id']>;
}
interface ObjectTypeInternalSlot_With_value extends ObjectTypeInternalSlot {
  +value: $NonMaybeType<ObjectTypeInternalSlot['value']>;
}
interface ObjectTypeInternalSlot_With_optional extends ObjectTypeInternalSlot {
  +optional: $NonMaybeType<ObjectTypeInternalSlot['optional']>;
}
interface ObjectTypeInternalSlot_With_static extends ObjectTypeInternalSlot {
  +static: $NonMaybeType<ObjectTypeInternalSlot['static']>;
}
interface ObjectTypeInternalSlot_With_method extends ObjectTypeInternalSlot {
  +method: $NonMaybeType<ObjectTypeInternalSlot['method']>;
}
interface ObjectTypeMappedTypeProperty_With_keyTparam
  extends ObjectTypeMappedTypeProperty {
  +keyTparam: $NonMaybeType<ObjectTypeMappedTypeProperty['keyTparam']>;
}
interface ObjectTypeMappedTypeProperty_With_propType
  extends ObjectTypeMappedTypeProperty {
  +propType: $NonMaybeType<ObjectTypeMappedTypeProperty['propType']>;
}
interface ObjectTypeMappedTypeProperty_With_sourceType
  extends ObjectTypeMappedTypeProperty {
  +sourceType: $NonMaybeType<ObjectTypeMappedTypeProperty['sourceType']>;
}
interface ObjectTypeMappedTypeProperty_With_variance
  extends ObjectTypeMappedTypeProperty {
  +variance: $NonMaybeType<ObjectTypeMappedTypeProperty['variance']>;
}
interface ObjectTypeMappedTypeProperty_With_optional
  extends ObjectTypeMappedTypeProperty {
  +optional: $NonMaybeType<ObjectTypeMappedTypeProperty['optional']>;
}
interface ObjectTypeProperty_With_key extends ObjectTypeProperty {
  +key: $NonMaybeType<ObjectTypeProperty['key']>;
}
interface ObjectTypeProperty_With_value extends ObjectTypeProperty {
  +value: $NonMaybeType<ObjectTypeProperty['value']>;
}
interface ObjectTypeProperty_With_method extends ObjectTypeProperty {
  +method: $NonMaybeType<ObjectTypeProperty['method']>;
}
interface ObjectTypeProperty_With_optional extends ObjectTypeProperty {
  +optional: $NonMaybeType<ObjectTypeProperty['optional']>;
}
interface ObjectTypeProperty_With_static extends ObjectTypeProperty {
  +static: $NonMaybeType<ObjectTypeProperty['static']>;
}
interface ObjectTypeProperty_With_proto extends ObjectTypeProperty {
  +proto: $NonMaybeType<ObjectTypeProperty['proto']>;
}
interface ObjectTypeProperty_With_variance extends ObjectTypeProperty {
  +variance: $NonMaybeType<ObjectTypeProperty['variance']>;
}
interface ObjectTypeProperty_With_kind extends ObjectTypeProperty {
  +kind: $NonMaybeType<ObjectTypeProperty['kind']>;
}
interface ObjectTypeSpreadProperty_With_argument
  extends ObjectTypeSpreadProperty {
  +argument: $NonMaybeType<ObjectTypeSpreadProperty['argument']>;
}
interface OpaqueType_With_id extends OpaqueType {
  +id: $NonMaybeType<OpaqueType['id']>;
}
interface OpaqueType_With_typeParameters extends OpaqueType {
  +typeParameters: $NonMaybeType<OpaqueType['typeParameters']>;
}
interface OpaqueType_With_impltype extends OpaqueType {
  +impltype: $NonMaybeType<OpaqueType['impltype']>;
}
interface OpaqueType_With_supertype extends OpaqueType {
  +supertype: $NonMaybeType<OpaqueType['supertype']>;
}
interface OptionalIndexedAccessType_With_objectType
  extends OptionalIndexedAccessType {
  +objectType: $NonMaybeType<OptionalIndexedAccessType['objectType']>;
}
interface OptionalIndexedAccessType_With_indexType
  extends OptionalIndexedAccessType {
  +indexType: $NonMaybeType<OptionalIndexedAccessType['indexType']>;
}
interface OptionalIndexedAccessType_With_optional
  extends OptionalIndexedAccessType {
  +optional: $NonMaybeType<OptionalIndexedAccessType['optional']>;
}
interface PrivateIdentifier_With_name extends PrivateIdentifier {
  +name: $NonMaybeType<PrivateIdentifier['name']>;
}
interface Program_With_body extends Program {
  +body: $NonMaybeType<Program['body']>;
}
interface Property_With_key extends Property {
  +key: $NonMaybeType<Property['key']>;
}
interface Property_With_value extends Property {
  +value: $NonMaybeType<Property['value']>;
}
interface Property_With_kind extends Property {
  +kind: $NonMaybeType<Property['kind']>;
}
interface Property_With_computed extends Property {
  +computed: $NonMaybeType<Property['computed']>;
}
interface Property_With_method extends Property {
  +method: $NonMaybeType<Property['method']>;
}
interface Property_With_shorthand extends Property {
  +shorthand: $NonMaybeType<Property['shorthand']>;
}
interface PropertyDefinition_With_key extends PropertyDefinition {
  +key: $NonMaybeType<PropertyDefinition['key']>;
}
interface PropertyDefinition_With_value extends PropertyDefinition {
  +value: $NonMaybeType<PropertyDefinition['value']>;
}
interface PropertyDefinition_With_computed extends PropertyDefinition {
  +computed: $NonMaybeType<PropertyDefinition['computed']>;
}
interface PropertyDefinition_With_static extends PropertyDefinition {
  +static: $NonMaybeType<PropertyDefinition['static']>;
}
interface PropertyDefinition_With_declare extends PropertyDefinition {
  +declare: $NonMaybeType<PropertyDefinition['declare']>;
}
interface PropertyDefinition_With_optional extends PropertyDefinition {
  +optional: $NonMaybeType<PropertyDefinition['optional']>;
}
interface PropertyDefinition_With_variance extends PropertyDefinition {
  +variance: $NonMaybeType<PropertyDefinition['variance']>;
}
interface PropertyDefinition_With_typeAnnotation extends PropertyDefinition {
  +typeAnnotation: $NonMaybeType<PropertyDefinition['typeAnnotation']>;
}
interface PropertyDefinition_With_tsModifiers extends PropertyDefinition {
  +tsModifiers: $NonMaybeType<PropertyDefinition['tsModifiers']>;
}
interface QualifiedTypeIdentifier_With_qualification
  extends QualifiedTypeIdentifier {
  +qualification: $NonMaybeType<QualifiedTypeIdentifier['qualification']>;
}
interface QualifiedTypeIdentifier_With_id extends QualifiedTypeIdentifier {
  +id: $NonMaybeType<QualifiedTypeIdentifier['id']>;
}
interface QualifiedTypeofIdentifier_With_qualification
  extends QualifiedTypeofIdentifier {
  +qualification: $NonMaybeType<QualifiedTypeofIdentifier['qualification']>;
}
interface QualifiedTypeofIdentifier_With_id extends QualifiedTypeofIdentifier {
  +id: $NonMaybeType<QualifiedTypeofIdentifier['id']>;
}
interface RestElement_With_argument extends RestElement {
  +argument: $NonMaybeType<RestElement['argument']>;
}
interface ReturnStatement_With_argument extends ReturnStatement {
  +argument: $NonMaybeType<ReturnStatement['argument']>;
}
interface SequenceExpression_With_expressions extends SequenceExpression {
  +expressions: $NonMaybeType<SequenceExpression['expressions']>;
}
interface SpreadElement_With_argument extends SpreadElement {
  +argument: $NonMaybeType<SpreadElement['argument']>;
}
interface StringLiteralTypeAnnotation_With_value
  extends StringLiteralTypeAnnotation {
  +value: $NonMaybeType<StringLiteralTypeAnnotation['value']>;
}
interface StringLiteralTypeAnnotation_With_raw
  extends StringLiteralTypeAnnotation {
  +raw: $NonMaybeType<StringLiteralTypeAnnotation['raw']>;
}
interface SwitchCase_With_test extends SwitchCase {
  +test: $NonMaybeType<SwitchCase['test']>;
}
interface SwitchCase_With_consequent extends SwitchCase {
  +consequent: $NonMaybeType<SwitchCase['consequent']>;
}
interface SwitchStatement_With_discriminant extends SwitchStatement {
  +discriminant: $NonMaybeType<SwitchStatement['discriminant']>;
}
interface SwitchStatement_With_cases extends SwitchStatement {
  +cases: $NonMaybeType<SwitchStatement['cases']>;
}
interface TaggedTemplateExpression_With_tag extends TaggedTemplateExpression {
  +tag: $NonMaybeType<TaggedTemplateExpression['tag']>;
}
interface TaggedTemplateExpression_With_quasi extends TaggedTemplateExpression {
  +quasi: $NonMaybeType<TaggedTemplateExpression['quasi']>;
}
interface TemplateElement_With_tail extends TemplateElement {
  +tail: $NonMaybeType<TemplateElement['tail']>;
}
interface TemplateElement_With_cooked extends TemplateElement {
  +cooked: $NonMaybeType<TemplateElement['cooked']>;
}
interface TemplateElement_With_raw extends TemplateElement {
  +raw: $NonMaybeType<TemplateElement['raw']>;
}
interface TemplateLiteral_With_quasis extends TemplateLiteral {
  +quasis: $NonMaybeType<TemplateLiteral['quasis']>;
}
interface TemplateLiteral_With_expressions extends TemplateLiteral {
  +expressions: $NonMaybeType<TemplateLiteral['expressions']>;
}
interface ThrowStatement_With_argument extends ThrowStatement {
  +argument: $NonMaybeType<ThrowStatement['argument']>;
}
interface TryStatement_With_block extends TryStatement {
  +block: $NonMaybeType<TryStatement['block']>;
}
interface TryStatement_With_handler extends TryStatement {
  +handler: $NonMaybeType<TryStatement['handler']>;
}
interface TryStatement_With_finalizer extends TryStatement {
  +finalizer: $NonMaybeType<TryStatement['finalizer']>;
}
interface TupleTypeAnnotation_With_types extends TupleTypeAnnotation {
  +types: $NonMaybeType<TupleTypeAnnotation['types']>;
}
interface TupleTypeLabeledElement_With_label extends TupleTypeLabeledElement {
  +label: $NonMaybeType<TupleTypeLabeledElement['label']>;
}
interface TupleTypeLabeledElement_With_elementType
  extends TupleTypeLabeledElement {
  +elementType: $NonMaybeType<TupleTypeLabeledElement['elementType']>;
}
interface TupleTypeLabeledElement_With_optional
  extends TupleTypeLabeledElement {
  +optional: $NonMaybeType<TupleTypeLabeledElement['optional']>;
}
interface TupleTypeLabeledElement_With_variance
  extends TupleTypeLabeledElement {
  +variance: $NonMaybeType<TupleTypeLabeledElement['variance']>;
}
interface TupleTypeSpreadElement_With_label extends TupleTypeSpreadElement {
  +label: $NonMaybeType<TupleTypeSpreadElement['label']>;
}
interface TupleTypeSpreadElement_With_typeAnnotation
  extends TupleTypeSpreadElement {
  +typeAnnotation: $NonMaybeType<TupleTypeSpreadElement['typeAnnotation']>;
}
interface TypeAlias_With_id extends TypeAlias {
  +id: $NonMaybeType<TypeAlias['id']>;
}
interface TypeAlias_With_typeParameters extends TypeAlias {
  +typeParameters: $NonMaybeType<TypeAlias['typeParameters']>;
}
interface TypeAlias_With_right extends TypeAlias {
  +right: $NonMaybeType<TypeAlias['right']>;
}
interface TypeAnnotation_With_typeAnnotation extends TypeAnnotation {
  +typeAnnotation: $NonMaybeType<TypeAnnotation['typeAnnotation']>;
}
interface TypeCastExpression_With_expression extends TypeCastExpression {
  +expression: $NonMaybeType<TypeCastExpression['expression']>;
}
interface TypeCastExpression_With_typeAnnotation extends TypeCastExpression {
  +typeAnnotation: $NonMaybeType<TypeCastExpression['typeAnnotation']>;
}
interface TypeofTypeAnnotation_With_argument extends TypeofTypeAnnotation {
  +argument: $NonMaybeType<TypeofTypeAnnotation['argument']>;
}
interface TypeofTypeAnnotation_With_typeArguments extends TypeofTypeAnnotation {
  +typeArguments: $NonMaybeType<TypeofTypeAnnotation['typeArguments']>;
}
interface TypeOperator_With_operator extends TypeOperator {
  +operator: $NonMaybeType<TypeOperator['operator']>;
}
interface TypeOperator_With_typeAnnotation extends TypeOperator {
  +typeAnnotation: $NonMaybeType<TypeOperator['typeAnnotation']>;
}
interface TypeParameter_With_name extends TypeParameter {
  +name: $NonMaybeType<TypeParameter['name']>;
}
interface TypeParameter_With_bound extends TypeParameter {
  +bound: $NonMaybeType<TypeParameter['bound']>;
}
interface TypeParameter_With_variance extends TypeParameter {
  +variance: $NonMaybeType<TypeParameter['variance']>;
}
interface TypeParameter_With_default extends TypeParameter {
  +default: $NonMaybeType<TypeParameter['default']>;
}
interface TypeParameter_With_usesExtendsBound extends TypeParameter {
  +usesExtendsBound: $NonMaybeType<TypeParameter['usesExtendsBound']>;
}
interface TypeParameterDeclaration_With_params
  extends TypeParameterDeclaration {
  +params: $NonMaybeType<TypeParameterDeclaration['params']>;
}
interface TypeParameterInstantiation_With_params
  extends TypeParameterInstantiation {
  +params: $NonMaybeType<TypeParameterInstantiation['params']>;
}
interface TypePredicate_With_parameterName extends TypePredicate {
  +parameterName: $NonMaybeType<TypePredicate['parameterName']>;
}
interface TypePredicate_With_typeAnnotation extends TypePredicate {
  +typeAnnotation: $NonMaybeType<TypePredicate['typeAnnotation']>;
}
interface TypePredicate_With_asserts extends TypePredicate {
  +asserts: $NonMaybeType<TypePredicate['asserts']>;
}
interface UnaryExpression_With_operator extends UnaryExpression {
  +operator: $NonMaybeType<UnaryExpression['operator']>;
}
interface UnaryExpression_With_argument extends UnaryExpression {
  +argument: $NonMaybeType<UnaryExpression['argument']>;
}
interface UnaryExpression_With_prefix extends UnaryExpression {
  +prefix: $NonMaybeType<UnaryExpression['prefix']>;
}
interface UnionTypeAnnotation_With_types extends UnionTypeAnnotation {
  +types: $NonMaybeType<UnionTypeAnnotation['types']>;
}
interface UpdateExpression_With_operator extends UpdateExpression {
  +operator: $NonMaybeType<UpdateExpression['operator']>;
}
interface UpdateExpression_With_argument extends UpdateExpression {
  +argument: $NonMaybeType<UpdateExpression['argument']>;
}
interface UpdateExpression_With_prefix extends UpdateExpression {
  +prefix: $NonMaybeType<UpdateExpression['prefix']>;
}
interface VariableDeclaration_With_kind extends VariableDeclaration {
  +kind: $NonMaybeType<VariableDeclaration['kind']>;
}
interface VariableDeclaration_With_declarations extends VariableDeclaration {
  +declarations: $NonMaybeType<VariableDeclaration['declarations']>;
}
interface VariableDeclarator_With_init extends VariableDeclarator {
  +init: $NonMaybeType<VariableDeclarator['init']>;
}
interface VariableDeclarator_With_id extends VariableDeclarator {
  +id: $NonMaybeType<VariableDeclarator['id']>;
}
interface Variance_With_kind extends Variance {
  +kind: $NonMaybeType<Variance['kind']>;
}
interface WhileStatement_With_body extends WhileStatement {
  +body: $NonMaybeType<WhileStatement['body']>;
}
interface WhileStatement_With_test extends WhileStatement {
  +test: $NonMaybeType<WhileStatement['test']>;
}
interface WithStatement_With_object extends WithStatement {
  +object: $NonMaybeType<WithStatement['object']>;
}
interface WithStatement_With_body extends WithStatement {
  +body: $NonMaybeType<WithStatement['body']>;
}
interface YieldExpression_With_argument extends YieldExpression {
  +argument: $NonMaybeType<YieldExpression['argument']>;
}
interface YieldExpression_With_delegate extends YieldExpression {
  +delegate: $NonMaybeType<YieldExpression['delegate']>;
}
type StarSpecialSelector = ESNode;
type StatementSpecialSelector =
  | BlockStatement
  | BreakStatement
  | ContinueStatement
  | DebuggerStatement
  | DoWhileStatement
  | EmptyStatement
  | ExpressionStatement
  | ForInStatement
  | ForOfStatement
  | ForStatement
  | IfStatement
  | LabeledStatement
  | ReturnStatement
  | SwitchStatement
  | ThrowStatement
  | TryStatement
  | WhileStatement
  | WithStatement;
type DeclarationSpecialSelector =
  | ClassDeclaration
  | ComponentDeclaration
  | DeclareExportAllDeclaration
  | DeclareExportDeclaration
  | EnumDeclaration
  | ExportAllDeclaration
  | ExportDefaultDeclaration
  | ExportNamedDeclaration
  | FunctionDeclaration
  | HookDeclaration
  | ImportDeclaration
  | InterfaceDeclaration
  | TypeParameterDeclaration
  | VariableDeclaration;
type PatternSpecialSelector = ArrayPattern | AssignmentPattern | ObjectPattern;
type ExpressionSpecialSelector =
  | Identifier
  | MetaProperty
  | ArrayExpression
  | ArrowFunctionExpression
  | AsExpression
  | AssignmentExpression
  | AwaitExpression
  | BinaryExpression
  | CallExpression
  | ChainExpression
  | ClassExpression
  | ConditionalExpression
  | FunctionExpression
  | ImportExpression
  | JSXEmptyExpression
  | JSXMemberExpression
  | LogicalExpression
  | MemberExpression
  | NewExpression
  | ObjectExpression
  | SequenceExpression
  | TaggedTemplateExpression
  | ThisExpression
  | TypeCastExpression
  | UnaryExpression
  | UpdateExpression
  | YieldExpression
  | TemplateLiteral;
type FunctionSpecialSelector =
  | FunctionDeclaration
  | FunctionExpression
  | ArrowFunctionExpression;

export type ESQueryNodeSelectorsWithoutFallback = {
  +AnyTypeAnnotation?: (node: AnyTypeAnnotation) => void,
  +ArrayExpression?: (node: ArrayExpression) => void,
  +'ArrayExpression[elements]'?: (node: ArrayExpression_With_elements) => void,
  +'ArrayExpression[trailingComma]'?: (
    node: ArrayExpression_With_trailingComma,
  ) => void,
  +ArrayPattern?: (node: ArrayPattern) => void,
  +'ArrayPattern[elements]'?: (node: ArrayPattern_With_elements) => void,
  +'ArrayPattern[typeAnnotation]'?: (
    node: ArrayPattern_With_typeAnnotation,
  ) => void,
  +ArrayTypeAnnotation?: (node: ArrayTypeAnnotation) => void,
  +'ArrayTypeAnnotation[elementType]'?: (
    node: ArrayTypeAnnotation_With_elementType,
  ) => void,
  +ArrowFunctionExpression?: (node: ArrowFunctionExpression) => void,
  +'ArrowFunctionExpression[id]'?: (
    node: ArrowFunctionExpression_With_id,
  ) => void,
  +'ArrowFunctionExpression[params]'?: (
    node: ArrowFunctionExpression_With_params,
  ) => void,
  +'ArrowFunctionExpression[body]'?: (
    node: ArrowFunctionExpression_With_body,
  ) => void,
  +'ArrowFunctionExpression[typeParameters]'?: (
    node: ArrowFunctionExpression_With_typeParameters,
  ) => void,
  +'ArrowFunctionExpression[returnType]'?: (
    node: ArrowFunctionExpression_With_returnType,
  ) => void,
  +'ArrowFunctionExpression[predicate]'?: (
    node: ArrowFunctionExpression_With_predicate,
  ) => void,
  +'ArrowFunctionExpression[expression]'?: (
    node: ArrowFunctionExpression_With_expression,
  ) => void,
  +'ArrowFunctionExpression[async]'?: (
    node: ArrowFunctionExpression_With_async,
  ) => void,
  +AsExpression?: (node: AsExpression) => void,
  +'AsExpression[expression]'?: (node: AsExpression_With_expression) => void,
  +'AsExpression[typeAnnotation]'?: (
    node: AsExpression_With_typeAnnotation,
  ) => void,
  +AssignmentExpression?: (node: AssignmentExpression) => void,
  +'AssignmentExpression[operator]'?: (
    node: AssignmentExpression_With_operator,
  ) => void,
  +'AssignmentExpression[left]'?: (
    node: AssignmentExpression_With_left,
  ) => void,
  +'AssignmentExpression[right]'?: (
    node: AssignmentExpression_With_right,
  ) => void,
  +AssignmentPattern?: (node: AssignmentPattern) => void,
  +'AssignmentPattern[left]'?: (node: AssignmentPattern_With_left) => void,
  +'AssignmentPattern[right]'?: (node: AssignmentPattern_With_right) => void,
  +AwaitExpression?: (node: AwaitExpression) => void,
  +'AwaitExpression[argument]'?: (node: AwaitExpression_With_argument) => void,
  +BigIntLiteralTypeAnnotation?: (node: BigIntLiteralTypeAnnotation) => void,
  +'BigIntLiteralTypeAnnotation[raw]'?: (
    node: BigIntLiteralTypeAnnotation_With_raw,
  ) => void,
  +BigIntTypeAnnotation?: (node: BigIntTypeAnnotation) => void,
  +BinaryExpression?: (node: BinaryExpression) => void,
  +'BinaryExpression[left]'?: (node: BinaryExpression_With_left) => void,
  +'BinaryExpression[right]'?: (node: BinaryExpression_With_right) => void,
  +'BinaryExpression[operator]'?: (
    node: BinaryExpression_With_operator,
  ) => void,
  +BlockStatement?: (node: BlockStatement) => void,
  +'BlockStatement[body]'?: (node: BlockStatement_With_body) => void,
  +BooleanLiteralTypeAnnotation?: (node: BooleanLiteralTypeAnnotation) => void,
  +'BooleanLiteralTypeAnnotation[value]'?: (
    node: BooleanLiteralTypeAnnotation_With_value,
  ) => void,
  +'BooleanLiteralTypeAnnotation[raw]'?: (
    node: BooleanLiteralTypeAnnotation_With_raw,
  ) => void,
  +BooleanTypeAnnotation?: (node: BooleanTypeAnnotation) => void,
  +BreakStatement?: (node: BreakStatement) => void,
  +'BreakStatement[label]'?: (node: BreakStatement_With_label) => void,
  +CallExpression?: (node: CallExpression) => void,
  +'CallExpression[callee]'?: (node: CallExpression_With_callee) => void,
  +'CallExpression[typeArguments]'?: (
    node: CallExpression_With_typeArguments,
  ) => void,
  +'CallExpression[arguments]'?: (node: CallExpression_With_arguments) => void,
  +CatchClause?: (node: CatchClause) => void,
  +'CatchClause[param]'?: (node: CatchClause_With_param) => void,
  +'CatchClause[body]'?: (node: CatchClause_With_body) => void,
  +ChainExpression?: (node: ChainExpression) => void,
  +'ChainExpression[expression]'?: (
    node: ChainExpression_With_expression,
  ) => void,
  +ClassBody?: (node: ClassBody) => void,
  +'ClassBody[body]'?: (node: ClassBody_With_body) => void,
  +ClassDeclaration?: (node: ClassDeclaration) => void,
  +'ClassDeclaration[id]'?: (node: ClassDeclaration_With_id) => void,
  +'ClassDeclaration[typeParameters]'?: (
    node: ClassDeclaration_With_typeParameters,
  ) => void,
  +'ClassDeclaration[superClass]'?: (
    node: ClassDeclaration_With_superClass,
  ) => void,
  +'ClassDeclaration[superTypeParameters]'?: (
    node: ClassDeclaration_With_superTypeParameters,
  ) => void,
  +'ClassDeclaration[implements]'?: (
    node: ClassDeclaration_With_implements,
  ) => void,
  +'ClassDeclaration[decorators]'?: (
    node: ClassDeclaration_With_decorators,
  ) => void,
  +'ClassDeclaration[body]'?: (node: ClassDeclaration_With_body) => void,
  +ClassExpression?: (node: ClassExpression) => void,
  +'ClassExpression[id]'?: (node: ClassExpression_With_id) => void,
  +'ClassExpression[typeParameters]'?: (
    node: ClassExpression_With_typeParameters,
  ) => void,
  +'ClassExpression[superClass]'?: (
    node: ClassExpression_With_superClass,
  ) => void,
  +'ClassExpression[superTypeParameters]'?: (
    node: ClassExpression_With_superTypeParameters,
  ) => void,
  +'ClassExpression[implements]'?: (
    node: ClassExpression_With_implements,
  ) => void,
  +'ClassExpression[decorators]'?: (
    node: ClassExpression_With_decorators,
  ) => void,
  +'ClassExpression[body]'?: (node: ClassExpression_With_body) => void,
  +ClassImplements?: (node: ClassImplements) => void,
  +'ClassImplements[id]'?: (node: ClassImplements_With_id) => void,
  +'ClassImplements[typeParameters]'?: (
    node: ClassImplements_With_typeParameters,
  ) => void,
  +ComponentDeclaration?: (node: ComponentDeclaration) => void,
  +'ComponentDeclaration[id]'?: (node: ComponentDeclaration_With_id) => void,
  +'ComponentDeclaration[params]'?: (
    node: ComponentDeclaration_With_params,
  ) => void,
  +'ComponentDeclaration[body]'?: (
    node: ComponentDeclaration_With_body,
  ) => void,
  +'ComponentDeclaration[typeParameters]'?: (
    node: ComponentDeclaration_With_typeParameters,
  ) => void,
  +'ComponentDeclaration[rendersType]'?: (
    node: ComponentDeclaration_With_rendersType,
  ) => void,
  +ComponentParameter?: (node: ComponentParameter) => void,
  +'ComponentParameter[name]'?: (node: ComponentParameter_With_name) => void,
  +'ComponentParameter[local]'?: (node: ComponentParameter_With_local) => void,
  +'ComponentParameter[shorthand]'?: (
    node: ComponentParameter_With_shorthand,
  ) => void,
  +ComponentTypeAnnotation?: (node: ComponentTypeAnnotation) => void,
  +'ComponentTypeAnnotation[params]'?: (
    node: ComponentTypeAnnotation_With_params,
  ) => void,
  +'ComponentTypeAnnotation[rest]'?: (
    node: ComponentTypeAnnotation_With_rest,
  ) => void,
  +'ComponentTypeAnnotation[typeParameters]'?: (
    node: ComponentTypeAnnotation_With_typeParameters,
  ) => void,
  +'ComponentTypeAnnotation[rendersType]'?: (
    node: ComponentTypeAnnotation_With_rendersType,
  ) => void,
  +ComponentTypeParameter?: (node: ComponentTypeParameter) => void,
  +'ComponentTypeParameter[name]'?: (
    node: ComponentTypeParameter_With_name,
  ) => void,
  +'ComponentTypeParameter[typeAnnotation]'?: (
    node: ComponentTypeParameter_With_typeAnnotation,
  ) => void,
  +'ComponentTypeParameter[optional]'?: (
    node: ComponentTypeParameter_With_optional,
  ) => void,
  +ConditionalExpression?: (node: ConditionalExpression) => void,
  +'ConditionalExpression[test]'?: (
    node: ConditionalExpression_With_test,
  ) => void,
  +'ConditionalExpression[alternate]'?: (
    node: ConditionalExpression_With_alternate,
  ) => void,
  +'ConditionalExpression[consequent]'?: (
    node: ConditionalExpression_With_consequent,
  ) => void,
  +ConditionalTypeAnnotation?: (node: ConditionalTypeAnnotation) => void,
  +'ConditionalTypeAnnotation[checkType]'?: (
    node: ConditionalTypeAnnotation_With_checkType,
  ) => void,
  +'ConditionalTypeAnnotation[extendsType]'?: (
    node: ConditionalTypeAnnotation_With_extendsType,
  ) => void,
  +'ConditionalTypeAnnotation[trueType]'?: (
    node: ConditionalTypeAnnotation_With_trueType,
  ) => void,
  +'ConditionalTypeAnnotation[falseType]'?: (
    node: ConditionalTypeAnnotation_With_falseType,
  ) => void,
  +ContinueStatement?: (node: ContinueStatement) => void,
  +'ContinueStatement[label]'?: (node: ContinueStatement_With_label) => void,
  +DebuggerStatement?: (node: DebuggerStatement) => void,
  +DeclareClass?: (node: DeclareClass) => void,
  +'DeclareClass[id]'?: (node: DeclareClass_With_id) => void,
  +'DeclareClass[typeParameters]'?: (
    node: DeclareClass_With_typeParameters,
  ) => void,
  +'DeclareClass[extends]'?: (node: DeclareClass_With_extends) => void,
  +'DeclareClass[implements]'?: (node: DeclareClass_With_implements) => void,
  +'DeclareClass[mixins]'?: (node: DeclareClass_With_mixins) => void,
  +'DeclareClass[body]'?: (node: DeclareClass_With_body) => void,
  +DeclareComponent?: (node: DeclareComponent) => void,
  +'DeclareComponent[id]'?: (node: DeclareComponent_With_id) => void,
  +'DeclareComponent[params]'?: (node: DeclareComponent_With_params) => void,
  +'DeclareComponent[rest]'?: (node: DeclareComponent_With_rest) => void,
  +'DeclareComponent[typeParameters]'?: (
    node: DeclareComponent_With_typeParameters,
  ) => void,
  +'DeclareComponent[rendersType]'?: (
    node: DeclareComponent_With_rendersType,
  ) => void,
  +DeclaredPredicate?: (node: DeclaredPredicate) => void,
  +'DeclaredPredicate[value]'?: (node: DeclaredPredicate_With_value) => void,
  +DeclareEnum?: (node: DeclareEnum) => void,
  +'DeclareEnum[id]'?: (node: DeclareEnum_With_id) => void,
  +'DeclareEnum[body]'?: (node: DeclareEnum_With_body) => void,
  +DeclareExportAllDeclaration?: (node: DeclareExportAllDeclaration) => void,
  +'DeclareExportAllDeclaration[source]'?: (
    node: DeclareExportAllDeclaration_With_source,
  ) => void,
  +DeclareExportDeclaration?: (node: DeclareExportDeclaration) => void,
  +'DeclareExportDeclaration[declaration]'?: (
    node: DeclareExportDeclaration_With_declaration,
  ) => void,
  +'DeclareExportDeclaration[specifiers]'?: (
    node: DeclareExportDeclaration_With_specifiers,
  ) => void,
  +'DeclareExportDeclaration[source]'?: (
    node: DeclareExportDeclaration_With_source,
  ) => void,
  +'DeclareExportDeclaration[default]'?: (
    node: DeclareExportDeclaration_With_default,
  ) => void,
  +DeclareFunction?: (node: DeclareFunction) => void,
  +'DeclareFunction[id]'?: (node: DeclareFunction_With_id) => void,
  +'DeclareFunction[predicate]'?: (
    node: DeclareFunction_With_predicate,
  ) => void,
  +DeclareHook?: (node: DeclareHook) => void,
  +'DeclareHook[id]'?: (node: DeclareHook_With_id) => void,
  +DeclareInterface?: (node: DeclareInterface) => void,
  +'DeclareInterface[id]'?: (node: DeclareInterface_With_id) => void,
  +'DeclareInterface[typeParameters]'?: (
    node: DeclareInterface_With_typeParameters,
  ) => void,
  +'DeclareInterface[extends]'?: (node: DeclareInterface_With_extends) => void,
  +'DeclareInterface[body]'?: (node: DeclareInterface_With_body) => void,
  +DeclareModule?: (node: DeclareModule) => void,
  +'DeclareModule[id]'?: (node: DeclareModule_With_id) => void,
  +'DeclareModule[body]'?: (node: DeclareModule_With_body) => void,
  +DeclareModuleExports?: (node: DeclareModuleExports) => void,
  +'DeclareModuleExports[typeAnnotation]'?: (
    node: DeclareModuleExports_With_typeAnnotation,
  ) => void,
  +DeclareNamespace?: (node: DeclareNamespace) => void,
  +'DeclareNamespace[id]'?: (node: DeclareNamespace_With_id) => void,
  +'DeclareNamespace[body]'?: (node: DeclareNamespace_With_body) => void,
  +DeclareOpaqueType?: (node: DeclareOpaqueType) => void,
  +'DeclareOpaqueType[id]'?: (node: DeclareOpaqueType_With_id) => void,
  +'DeclareOpaqueType[typeParameters]'?: (
    node: DeclareOpaqueType_With_typeParameters,
  ) => void,
  +'DeclareOpaqueType[impltype]'?: (
    node: DeclareOpaqueType_With_impltype,
  ) => void,
  +'DeclareOpaqueType[supertype]'?: (
    node: DeclareOpaqueType_With_supertype,
  ) => void,
  +DeclareTypeAlias?: (node: DeclareTypeAlias) => void,
  +'DeclareTypeAlias[id]'?: (node: DeclareTypeAlias_With_id) => void,
  +'DeclareTypeAlias[typeParameters]'?: (
    node: DeclareTypeAlias_With_typeParameters,
  ) => void,
  +'DeclareTypeAlias[right]'?: (node: DeclareTypeAlias_With_right) => void,
  +DeclareVariable?: (node: DeclareVariable) => void,
  +'DeclareVariable[id]'?: (node: DeclareVariable_With_id) => void,
  +'DeclareVariable[kind]'?: (node: DeclareVariable_With_kind) => void,
  +DoWhileStatement?: (node: DoWhileStatement) => void,
  +'DoWhileStatement[body]'?: (node: DoWhileStatement_With_body) => void,
  +'DoWhileStatement[test]'?: (node: DoWhileStatement_With_test) => void,
  +EmptyStatement?: (node: EmptyStatement) => void,
  +EmptyTypeAnnotation?: (node: EmptyTypeAnnotation) => void,
  +EnumBooleanBody?: (node: EnumBooleanBody) => void,
  +'EnumBooleanBody[members]'?: (node: EnumBooleanBody_With_members) => void,
  +'EnumBooleanBody[explicitType]'?: (
    node: EnumBooleanBody_With_explicitType,
  ) => void,
  +'EnumBooleanBody[hasUnknownMembers]'?: (
    node: EnumBooleanBody_With_hasUnknownMembers,
  ) => void,
  +EnumBooleanMember?: (node: EnumBooleanMember) => void,
  +'EnumBooleanMember[id]'?: (node: EnumBooleanMember_With_id) => void,
  +'EnumBooleanMember[init]'?: (node: EnumBooleanMember_With_init) => void,
  +EnumDeclaration?: (node: EnumDeclaration) => void,
  +'EnumDeclaration[id]'?: (node: EnumDeclaration_With_id) => void,
  +'EnumDeclaration[body]'?: (node: EnumDeclaration_With_body) => void,
  +EnumDefaultedMember?: (node: EnumDefaultedMember) => void,
  +'EnumDefaultedMember[id]'?: (node: EnumDefaultedMember_With_id) => void,
  +EnumNumberBody?: (node: EnumNumberBody) => void,
  +'EnumNumberBody[members]'?: (node: EnumNumberBody_With_members) => void,
  +'EnumNumberBody[explicitType]'?: (
    node: EnumNumberBody_With_explicitType,
  ) => void,
  +'EnumNumberBody[hasUnknownMembers]'?: (
    node: EnumNumberBody_With_hasUnknownMembers,
  ) => void,
  +EnumNumberMember?: (node: EnumNumberMember) => void,
  +'EnumNumberMember[id]'?: (node: EnumNumberMember_With_id) => void,
  +'EnumNumberMember[init]'?: (node: EnumNumberMember_With_init) => void,
  +EnumStringBody?: (node: EnumStringBody) => void,
  +'EnumStringBody[members]'?: (node: EnumStringBody_With_members) => void,
  +'EnumStringBody[explicitType]'?: (
    node: EnumStringBody_With_explicitType,
  ) => void,
  +'EnumStringBody[hasUnknownMembers]'?: (
    node: EnumStringBody_With_hasUnknownMembers,
  ) => void,
  +EnumStringMember?: (node: EnumStringMember) => void,
  +'EnumStringMember[id]'?: (node: EnumStringMember_With_id) => void,
  +'EnumStringMember[init]'?: (node: EnumStringMember_With_init) => void,
  +EnumSymbolBody?: (node: EnumSymbolBody) => void,
  +'EnumSymbolBody[members]'?: (node: EnumSymbolBody_With_members) => void,
  +'EnumSymbolBody[hasUnknownMembers]'?: (
    node: EnumSymbolBody_With_hasUnknownMembers,
  ) => void,
  +ExistsTypeAnnotation?: (node: ExistsTypeAnnotation) => void,
  +ExportAllDeclaration?: (node: ExportAllDeclaration) => void,
  +'ExportAllDeclaration[exported]'?: (
    node: ExportAllDeclaration_With_exported,
  ) => void,
  +'ExportAllDeclaration[source]'?: (
    node: ExportAllDeclaration_With_source,
  ) => void,
  +'ExportAllDeclaration[exportKind]'?: (
    node: ExportAllDeclaration_With_exportKind,
  ) => void,
  +ExportDefaultDeclaration?: (node: ExportDefaultDeclaration) => void,
  +'ExportDefaultDeclaration[declaration]'?: (
    node: ExportDefaultDeclaration_With_declaration,
  ) => void,
  +ExportNamedDeclaration?: (node: ExportNamedDeclaration) => void,
  +'ExportNamedDeclaration[declaration]'?: (
    node: ExportNamedDeclaration